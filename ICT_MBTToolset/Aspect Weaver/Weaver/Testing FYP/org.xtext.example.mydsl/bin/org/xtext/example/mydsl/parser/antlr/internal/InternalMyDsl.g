/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAspectAspectParserRuleCall_0()); 
	    }
		lv_aspect_0_0=ruleAspect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"aspect",
        		lv_aspect_0_0, 
        		"Aspect");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAspect
entryRuleAspect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAspectRule()); }
	 iv_ruleAspect=ruleAspect 
	 { $current=$iv_ruleAspect.current; } 
	 EOF 
;

// Rule Aspect
ruleAspect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAspectAccess().getMappingParserRuleCall_0()); 
    }
    this_Mapping_0=ruleMapping
    { 
        $current = $this_Mapping_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAspectAccess().getAspectDefinitionParserRuleCall_1()); 
    }
    this_AspectDefinition_1=ruleAspectDefinition
    { 
        $current = $this_AspectDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	 iv_ruleMapping=ruleMapping 
	 { $current=$iv_ruleMapping.current; } 
	 EOF 
;

// Rule Mapping
ruleMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mapping' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMappingAccess().getMappingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getMappingnameMappingNameParserRuleCall_1_0()); 
	    }
		lv_mappingname_1_0=ruleMappingName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"mappingname",
        		lv_mappingname_1_0, 
        		"MappingName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getMappingAccess().getLetExpressionParserRuleCall_3()); 
    }
ruleletExpression
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleletExpression
entryRuleletExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExpressionRule()); } 
	 iv_ruleletExpression=ruleletExpression 
	 { $current=$iv_ruleletExpression.current.getText(); }  
	 EOF 
;

// Rule letExpression
ruleletExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='let' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getLetKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getLetVarNameParserRuleCall_0_1()); 
    }
    this_letVarName_1=ruleletVarName    {
		$current.merge(this_letVarName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getColonKeyword_0_2()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getLeftCurlyBracketKeyword_0_3()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getOperationParserRuleCall_0_4_0()); 
    }
    this_Operation_4=ruleOperation    {
		$current.merge(this_Operation_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getCommaKeyword_0_4_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getOperationParserRuleCall_0_4_1_1()); 
    }
    this_Operation_6=ruleOperation    {
		$current.merge(this_Operation_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getRightCurlyBracketKeyword_0_5()); 
    }
)
    |(
	kw='let' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getLetKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getLetVarNameParserRuleCall_1_1()); 
    }
    this_letVarName_9=ruleletVarName    {
		$current.merge(this_letVarName_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getLetVarNameParserRuleCall_1_3()); 
    }
    this_letVarName_11=ruleletVarName    {
		$current.merge(this_letVarName_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getColonKeyword_1_4()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getLeftCurlyBracketKeyword_1_5()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getCOAParserRuleCall_1_6_0()); 
    }
    this_COA_14=ruleCOA    {
		$current.merge(this_COA_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_6_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getSCOAParserRuleCall_1_6_2()); 
    }
    this_SCOA_16=ruleSCOA    {
		$current.merge(this_SCOA_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getCommaKeyword_1_7_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getCOAParserRuleCall_1_7_1_0()); 
    }
    this_COA_18=ruleCOA    {
		$current.merge(this_COA_18);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_7_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getSCOAParserRuleCall_1_7_1_2()); 
    }
    this_SCOA_20=ruleSCOA    {
		$current.merge(this_SCOA_20);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getRightCurlyBracketKeyword_1_8()); 
    }
)
    |(
	kw='let' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getLetKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getLetVarNameParserRuleCall_2_1()); 
    }
    this_letVarName_23=ruleletVarName    {
		$current.merge(this_letVarName_23);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getHyphenMinusGreaterThanSignKeyword_2_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getLetVarNameArrayParserRuleCall_2_3()); 
    }
    this_letVarNameArray_25=ruleletVarNameArray    {
		$current.merge(this_letVarNameArray_25);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getColonKeyword_2_4()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getLeftCurlyBracketKeyword_2_5()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getCOAParserRuleCall_2_6_0()); 
    }
    this_COA_28=ruleCOA    {
		$current.merge(this_COA_28);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getHyphenMinusGreaterThanSignKeyword_2_6_1()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getLeftCurlyBracketKeyword_2_6_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getCOAParserRuleCall_2_6_3_0()); 
    }
    this_COA_31=ruleCOA    {
		$current.merge(this_COA_31);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getCommaKeyword_2_6_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getCOAParserRuleCall_2_6_3_1_1()); 
    }
    this_COA_33=ruleCOA    {
		$current.merge(this_COA_33);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getRightCurlyBracketKeyword_2_6_4()); 
    }
)(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getCommaKeyword_2_7_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getCOAParserRuleCall_2_7_1_0()); 
    }
    this_COA_36=ruleCOA    {
		$current.merge(this_COA_36);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getHyphenMinusGreaterThanSignKeyword_2_7_1_1()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getLeftCurlyBracketKeyword_2_7_1_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getCOAParserRuleCall_2_7_1_3_0()); 
    }
    this_COA_39=ruleCOA    {
		$current.merge(this_COA_39);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getCommaKeyword_2_7_1_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetExpressionAccess().getCOAParserRuleCall_2_7_1_3_1_1()); 
    }
    this_COA_41=ruleCOA    {
		$current.merge(this_COA_41);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getRightCurlyBracketKeyword_2_7_1_4()); 
    }
))*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetExpressionAccess().getRightCurlyBracketKeyword_2_8()); 
    }
))
    ;





// Entry rule entryRuleCOA
entryRuleCOA returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOARule()); } 
	 iv_ruleCOA=ruleCOA 
	 { $current=$iv_ruleCOA.current.getText(); }  
	 EOF 
;

// Rule COA
ruleCOA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getCOAAccess().getOperationParserRuleCall()); 
    }
    this_Operation_0=ruleOperation    {
		$current.merge(this_Operation_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleSCOA
entryRuleSCOA returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSCOARule()); } 
	 iv_ruleSCOA=ruleSCOA 
	 { $current=$iv_ruleSCOA.current.getText(); }  
	 EOF 
;

// Rule SCOA
ruleSCOA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSCOAAccess().getOperationParserRuleCall()); 
    }
    this_Operation_0=ruleOperation    {
		$current.merge(this_Operation_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleAttributeContext
entryRuleAttributeContext returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeContextRule()); } 
	 iv_ruleAttributeContext=ruleAttributeContext 
	 { $current=$iv_ruleAttributeContext.current.getText(); }  
	 EOF 
;

// Rule AttributeContext
ruleAttributeContext returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeContextAccess().getClassifierContextParserRuleCall_0()); 
    }
    this_ClassifierContext_0=ruleClassifierContext    {
		$current.merge(this_ClassifierContext_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeContextAccess().getColonColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getAttributeContextAccess().getNameCharParserRuleCall_2()); 
    }
    this_NameChar_2=ruleNameChar    {
		$current.merge(this_NameChar_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleOperation
entryRuleOperation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); } 
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current.getText(); }  
	 EOF 
;

// Rule Operation
ruleOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getClassifierContextParserRuleCall_0()); 
    }
    this_ClassifierContext_0=ruleClassifierContext    {
		$current.merge(this_ClassifierContext_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getOperationContextParserRuleCall_1()); 
    }
    this_OperationContext_1=ruleOperationContext    {
		$current.merge(this_OperationContext_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getAttributeContextParserRuleCall_2()); 
    }
    this_AttributeContext_2=ruleAttributeContext    {
		$current.merge(this_AttributeContext_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleletVarNameArray
entryRuleletVarNameArray returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetVarNameArrayRule()); } 
	 iv_ruleletVarNameArray=ruleletVarNameArray 
	 { $current=$iv_ruleletVarNameArray.current.getText(); }  
	 EOF 
;

// Rule letVarNameArray
ruleletVarNameArray returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetVarNameArrayAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLetVarNameArrayAccess().getLetVarNameParserRuleCall_1_0()); 
    }
    this_letVarName_1=ruleletVarName    {
		$current.merge(this_letVarName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetVarNameArrayAccess().getCommaKeyword_1_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLetVarNameArrayAccess().getLetVarNameParserRuleCall_1_1_1()); 
    }
    this_letVarName_3=ruleletVarName    {
		$current.merge(this_letVarName_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLetVarNameArrayAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleletVarName
entryRuleletVarName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetVarNameRule()); } 
	 iv_ruleletVarName=ruleletVarName 
	 { $current=$iv_ruleletVarName.current.getText(); }  
	 EOF 
;

// Rule letVarName
ruleletVarName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLetVarNameAccess().getNameCharParserRuleCall()); 
    }
    this_NameChar_0=ruleNameChar    {
		$current.merge(this_NameChar_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleAspectDefinition
entryRuleAspectDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAspectDefinitionRule()); }
	 iv_ruleAspectDefinition=ruleAspectDefinition 
	 { $current=$iv_ruleAspectDefinition.current; } 
	 EOF 
;

// Rule AspectDefinition
ruleAspectDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='aspect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAspectDefinitionAccess().getAspectKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getAspectDefinitionAccess().getAspectNameParserRuleCall_1()); 
    }
ruleAspectName
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAspectDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAspectDefinitionAccess().getMappingdeclarartionMapping_DeclarationParserRuleCall_3_0()); 
	    }
		lv_mappingdeclarartion_3_0=ruleMapping_Declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAspectDefinitionRule());
	        }
       		set(
       			$current, 
       			"mappingdeclarartion",
        		lv_mappingdeclarartion_3_0, 
        		"Mapping_Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAspectDefinitionAccess().getPointcutdeclarationPointcut_DeclarationParserRuleCall_4_0()); 
	    }
		lv_pointcutdeclaration_4_0=rulePointcut_Declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAspectDefinitionRule());
	        }
       		set(
       			$current, 
       			"pointcutdeclaration",
        		lv_pointcutdeclaration_4_0, 
        		"Pointcut_Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getAspectDefinitionAccess().getContextDeclarationParserRuleCall_5()); 
    }
ruleContextDeclaration
    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getAspectDefinitionAccess().getQueryDeclarationParserRuleCall_6()); 
    }
    this_QueryDeclaration_6=ruleQueryDeclaration
    { 
        $current = $this_QueryDeclaration_6.current; 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAspectDefinitionAccess().getAIDeclarationAIParserRuleCall_7_0()); 
	    }
		lv_AIDeclaration_7_0=ruleAI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAspectDefinitionRule());
	        }
       		set(
       			$current, 
       			"AIDeclaration",
        		lv_AIDeclaration_7_0, 
        		"AI");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAspectDefinitionAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleAspectName
entryRuleAspectName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAspectNameRule()); } 
	 iv_ruleAspectName=ruleAspectName 
	 { $current=$iv_ruleAspectName.current.getText(); }  
	 EOF 
;

// Rule AspectName
ruleAspectName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAspectNameAccess().getNameCharParserRuleCall()); 
    }
    this_NameChar_0=ruleNameChar    {
		$current.merge(this_NameChar_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleMapping_Declaration
entryRuleMapping_Declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapping_DeclarationRule()); }
	 iv_ruleMapping_Declaration=ruleMapping_Declaration 
	 { $current=$iv_ruleMapping_Declaration.current; } 
	 EOF 
;

// Rule Mapping_Declaration
ruleMapping_Declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import_mapping' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMapping_DeclarationAccess().getImport_mappingKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMapping_DeclarationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getMapping_DeclarationAccess().getReference_mappingnameMappingNameCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleMappingName
entryRuleMappingName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingNameRule()); }
	 iv_ruleMappingName=ruleMappingName 
	 { $current=$iv_ruleMappingName.current; } 
	 EOF 
;

// Rule MappingName
ruleMappingName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMappingNameAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMappingNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRulePointcut_Declaration
entryRulePointcut_Declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointcut_DeclarationRule()); }
	 iv_rulePointcut_Declaration=rulePointcut_Declaration 
	 { $current=$iv_rulePointcut_Declaration.current; } 
	 EOF 
;

// Rule Pointcut_Declaration
rulePointcut_Declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pointcut' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPointcut_DeclarationAccess().getPointcutKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPointcut_DeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointcut_DeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;







// Entry rule entryRuleContextDeclaration
entryRuleContextDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextDeclarationRule()); } 
	 iv_ruleContextDeclaration=ruleContextDeclaration 
	 { $current=$iv_ruleContextDeclaration.current.getText(); }  
	 EOF 
;

// Rule ContextDeclaration
ruleContextDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='context' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getContextDeclarationAccess().getContextKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getContextDeclarationAccess().getClassifierContextParserRuleCall_1_0()); 
    }
    this_ClassifierContext_1=ruleClassifierContext    {
		$current.merge(this_ClassifierContext_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getContextDeclarationAccess().getOperationContextParserRuleCall_1_1()); 
    }
    this_OperationContext_2=ruleOperationContext    {
		$current.merge(this_OperationContext_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleClassifierContext
entryRuleClassifierContext returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassifierContextRule()); } 
	 iv_ruleClassifierContext=ruleClassifierContext 
	 { $current=$iv_ruleClassifierContext.current.getText(); }  
	 EOF 
;

// Rule ClassifierContext
ruleClassifierContext returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getClassifierContextAccess().getNameCharParserRuleCall()); 
    }
    this_NameChar_0=ruleNameChar    {
		$current.merge(this_NameChar_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleOperationContext
entryRuleOperationContext returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationContextRule()); } 
	 iv_ruleOperationContext=ruleOperationContext 
	 { $current=$iv_ruleOperationContext.current.getText(); }  
	 EOF 
;

// Rule OperationContext
ruleOperationContext returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationContextAccess().getClassifierContextParserRuleCall_0()); 
    }
    this_ClassifierContext_0=ruleClassifierContext    {
		$current.merge(this_ClassifierContext_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperationContextAccess().getColonColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getOperationContextAccess().getOperationNameParserRuleCall_2()); 
    }
    this_OperationName_2=ruleOperationName    {
		$current.merge(this_OperationName_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperationContextAccess().getLeftParenthesisKeyword_3()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getOperationContextAccess().getArgumentsParserRuleCall_4_0()); 
    }
    this_Arguments_4=ruleArguments    {
		$current.merge(this_Arguments_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperationContextAccess().getCommaKeyword_4_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOperationContextAccess().getArgumentsParserRuleCall_4_1_1()); 
    }
    this_Arguments_6=ruleArguments    {
		$current.merge(this_Arguments_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperationContextAccess().getRightParenthesisKeyword_5()); 
    }
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperationContextAccess().getColonKeyword_6_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOperationContextAccess().getReturntypeParserRuleCall_6_1()); 
    }
    this_Returntype_9=ruleReturntype    {
		$current.merge(this_Returntype_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleOperationName
entryRuleOperationName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationNameRule()); } 
	 iv_ruleOperationName=ruleOperationName 
	 { $current=$iv_ruleOperationName.current.getText(); }  
	 EOF 
;

// Rule OperationName
ruleOperationName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getOperationNameAccess().getNameCharParserRuleCall()); 
    }
    this_NameChar_0=ruleNameChar    {
		$current.merge(this_NameChar_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleArguments
entryRuleArguments returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); } 
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current.getText(); }  
	 EOF 
;

// Rule Arguments
ruleArguments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getArgumentsAccess().getNameCharParserRuleCall()); 
    }
    this_NameChar_0=ruleNameChar    {
		$current.merge(this_NameChar_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleReturntype
entryRuleReturntype returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturntypeRule()); } 
	 iv_ruleReturntype=ruleReturntype 
	 { $current=$iv_ruleReturntype.current.getText(); }  
	 EOF 
;

// Rule Returntype
ruleReturntype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReturntypeAccess().getBooleanKeyword_0()); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReturntypeAccess().getStringKeyword_1()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReturntypeAccess().getIntKeyword_2()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReturntypeAccess().getFloatKeyword_3()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReturntypeAccess().getDoubleKeyword_4()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getReturntypeAccess().getNameCharParserRuleCall_5()); 
    }
    this_NameChar_5=ruleNameChar    {
		$current.merge(this_NameChar_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleAI
entryRuleAI returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAIRule()); }
	 iv_ruleAI=ruleAI 
	 { $current=$iv_ruleAI.current; } 
	 EOF 
;

// Rule AI
ruleAI returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAIAccess().getAdviceParserRuleCall_0()); 
    }
    this_Advice_0=ruleAdvice
    { 
        $current = $this_Advice_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAIAccess().getIntroParserRuleCall_1()); 
    }
    this_Intro_1=ruleIntro
    { 
        $current = $this_Intro_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAdvice
entryRuleAdvice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdviceRule()); }
	 iv_ruleAdvice=ruleAdvice 
	 { $current=$iv_ruleAdvice.current; } 
	 EOF 
;

// Rule Advice
ruleAdvice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdviceAccess().getAdviceDeclarationParserRuleCall_0()); 
    }
ruleAdviceDeclaration
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdviceAccess().getAdvicetypeAdviceTypeParserRuleCall_1_0()); 
	    }
		lv_advicetype_1_0=ruleAdviceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdviceRule());
	        }
       		set(
       			$current, 
       			"advicetype",
        		lv_advicetype_1_0, 
        		"AdviceType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdviceAccess().getIntroadvicequeryIntroAdviceQueryParserRuleCall_2_0()); 
	    }
		lv_introadvicequery_2_0=ruleIntroAdviceQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdviceRule());
	        }
       		set(
       			$current, 
       			"introadvicequery",
        		lv_introadvicequery_2_0, 
        		"IntroAdviceQuery");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAdviceDeclaration
entryRuleAdviceDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdviceDeclarationRule()); } 
	 iv_ruleAdviceDeclaration=ruleAdviceDeclaration 
	 { $current=$iv_ruleAdviceDeclaration.current.getText(); }  
	 EOF 
;

// Rule AdviceDeclaration
ruleAdviceDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='advice' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdviceDeclarationAccess().getAdviceKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getAdviceDeclarationAccess().getQueryTypeParserRuleCall_1()); 
    }
    this_QueryType_1=ruleQueryType    {
		$current.merge(this_QueryType_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdviceDeclarationAccess().getColonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleQueryType
entryRuleQueryType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryTypeRule()); } 
	 iv_ruleQueryType=ruleQueryType 
	 { $current=$iv_ruleQueryType.current.getText(); }  
	 EOF 
;

// Rule QueryType
ruleQueryType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='pre' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryTypeAccess().getPreKeyword_0()); 
    }

    |
	kw='post' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryTypeAccess().getPostKeyword_1()); 
    }

    |
	kw='inv' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryTypeAccess().getInvKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleAdviceType
entryRuleAdviceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdviceTypeRule()); }
	 iv_ruleAdviceType=ruleAdviceType 
	 { $current=$iv_ruleAdviceType.current; } 
	 EOF 
;

// Rule AdviceType
ruleAdviceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='and' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAdviceTypeAccess().getAndKeyword_0_0());
    }

    |	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdviceTypeAccess().getOrKeyword_0_1());
    }

    |	otherlv_2='xor' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdviceTypeAccess().getXorKeyword_0_2());
    }
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAdviceTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdviceTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleIntroAdviceQuery
entryRuleIntroAdviceQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntroAdviceQueryRule()); }
	 iv_ruleIntroAdviceQuery=ruleIntroAdviceQuery 
	 { $current=$iv_ruleIntroAdviceQuery.current; } 
	 EOF 
;

// Rule IntroAdviceQuery
ruleIntroAdviceQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntroAdviceQueryAccess().getNameOclExpressionParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleOclExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntroAdviceQueryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"OclExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIntro
entryRuleIntro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntroRule()); }
	 iv_ruleIntro=ruleIntro 
	 { $current=$iv_ruleIntro.current; } 
	 EOF 
;

// Rule Intro
ruleIntro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntroAccess().getIntroDeclarationParserRuleCall_0()); 
    }
ruleIntroDeclaration
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntroAccess().getIntrotypeIntroTypeParserRuleCall_1_0()); 
	    }
		lv_introtype_1_0=ruleIntroType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntroRule());
	        }
       		set(
       			$current, 
       			"introtype",
        		lv_introtype_1_0, 
        		"IntroType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIntroAccess().getIntroqueyIntroQueryParserRuleCall_2_0()); 
	    }
		lv_introquey_2_0=ruleIntroQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntroRule());
	        }
       		set(
       			$current, 
       			"introquey",
        		lv_introquey_2_0, 
        		"IntroQuery");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntroDeclaration
entryRuleIntroDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntroDeclarationRule()); } 
	 iv_ruleIntroDeclaration=ruleIntroDeclaration 
	 { $current=$iv_ruleIntroDeclaration.current.getText(); }  
	 EOF 
;

// Rule IntroDeclaration
ruleIntroDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='intro' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntroDeclarationAccess().getIntroKeyword_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntroDeclarationAccess().getColonKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleIntroType
entryRuleIntroType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntroTypeRule()); }
	 iv_ruleIntroType=ruleIntroType 
	 { $current=$iv_ruleIntroType.current; } 
	 EOF 
;

// Rule IntroType
ruleIntroType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntroTypeAccess().getQueryTypeParserRuleCall_0()); 
    }
ruleQueryType
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIntroTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntroTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleIntroQuery
entryRuleIntroQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntroQueryRule()); }
	 iv_ruleIntroQuery=ruleIntroQuery 
	 { $current=$iv_ruleIntroQuery.current; } 
	 EOF 
;

// Rule IntroQuery
ruleIntroQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntroQueryAccess().getNameOclExpressionParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleOclExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntroQueryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"OclExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleQueryDeclaration
entryRuleQueryDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryDeclarationRule()); }
	 iv_ruleQueryDeclaration=ruleQueryDeclaration 
	 { $current=$iv_ruleQueryDeclaration.current; } 
	 EOF 
;

// Rule QueryDeclaration
ruleQueryDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQueryDeclarationAccess().getQueryTypeParserRuleCall_0()); 
    }
ruleQueryType
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQueryDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
	otherlv_2='select' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQueryDeclarationAccess().getSelectKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getQueryDeclarationAccess().getQueryBodyParserRuleCall_3()); 
    }
    this_QueryBody_3=ruleQueryBody
    { 
        $current = $this_QueryBody_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQueryBody
entryRuleQueryBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryBodyRule()); }
	 iv_ruleQueryBody=ruleQueryBody 
	 { $current=$iv_ruleQueryBody.current; } 
	 EOF 
;

// Rule QueryBody
ruleQueryBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQueryBodyAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getQueryBodyAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQueryBodyAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='exp:OCLExpression' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getExpOCLExpressionKeyword_0_0());
    }
	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getVerticalLineKeyword_0_1());
    }
	otherlv_2='exp.oclIsTypeOf(thenExp)' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getExpOclIsTypeOfThenExpKeyword_0_2());
    }
)
    |((	otherlv_3='exp:OCLExpression' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getExpOCLExpressionKeyword_1_0_0());
    }
	otherlv_4='|' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getVerticalLineKeyword_1_0_1());
    }
	otherlv_5='exp.oclIsTypeOf(ifExp)' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getExpOclIsTypeOfIfExpKeyword_1_0_2());
    }
	otherlv_6='and' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExpressionAccess().getAndKeyword_1_0_3());
    }
	otherlv_7='exp.condition.refferedVariable' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpressionAccess().getExpConditionRefferedVariableKeyword_1_0_4());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpressionAccess().getEqualsSignKeyword_1_0_5());
    }
)(
(
		lv_name_9_0=RULE_ID
		{
			newLeafNode(lv_name_9_0, grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleOclExpression
entryRuleOclExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOclExpressionRule()); }
	 iv_ruleOclExpression=ruleOclExpression 
	 { $current=$iv_ruleOclExpression.current; } 
	 EOF 
;

// Rule OclExpression
ruleOclExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getOclExpressionAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOclExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNameChar
entryRuleNameChar returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameCharRule()); } 
	 iv_ruleNameChar=ruleNameChar 
	 { $current=$iv_ruleNameChar.current.getText(); }  
	 EOF 
;

// Rule NameChar
ruleNameChar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNameCharAccess().getIDTerminalRuleCall()); 
    }
)+
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


