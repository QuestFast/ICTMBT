/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Advice;
import org.xtext.example.mydsl.myDsl.AdviceType;
import org.xtext.example.mydsl.myDsl.AspectDefinition;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.Intro;
import org.xtext.example.mydsl.myDsl.IntroAdviceQuery;
import org.xtext.example.mydsl.myDsl.IntroQuery;
import org.xtext.example.mydsl.myDsl.IntroType;
import org.xtext.example.mydsl.myDsl.Mapping;
import org.xtext.example.mydsl.myDsl.MappingName;
import org.xtext.example.mydsl.myDsl.Mapping_Declaration;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.OclExpression;
import org.xtext.example.mydsl.myDsl.Pointcut_Declaration;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MyDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ADVICE:
				sequence_Advice(context, (Advice) semanticObject); 
				return; 
			case MyDslPackage.ADVICE_TYPE:
				sequence_AdviceType(context, (AdviceType) semanticObject); 
				return; 
			case MyDslPackage.ASPECT_DEFINITION:
				sequence_AspectDefinition(context, (AspectDefinition) semanticObject); 
				return; 
			case MyDslPackage.EXPRESSION:
				if(context == grammarAccess.getAspectRule() ||
				   context == grammarAccess.getAspectDefinitionRule()) {
					sequence_AspectDefinition_Expression(context, (Expression) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getExpressionRule() ||
				   context == grammarAccess.getQueryBodyRule() ||
				   context == grammarAccess.getQueryDeclarationRule()) {
					sequence_Expression(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.INTRO:
				sequence_Intro(context, (Intro) semanticObject); 
				return; 
			case MyDslPackage.INTRO_ADVICE_QUERY:
				sequence_IntroAdviceQuery(context, (IntroAdviceQuery) semanticObject); 
				return; 
			case MyDslPackage.INTRO_QUERY:
				sequence_IntroQuery(context, (IntroQuery) semanticObject); 
				return; 
			case MyDslPackage.INTRO_TYPE:
				sequence_IntroType(context, (IntroType) semanticObject); 
				return; 
			case MyDslPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case MyDslPackage.MAPPING_NAME:
				sequence_MappingName(context, (MappingName) semanticObject); 
				return; 
			case MyDslPackage.MAPPING_DECLARATION:
				sequence_Mapping_Declaration(context, (Mapping_Declaration) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.OCL_EXPRESSION:
				sequence_OclExpression(context, (OclExpression) semanticObject); 
				return; 
			case MyDslPackage.POINTCUT_DECLARATION:
				sequence_Pointcut_Declaration(context, (Pointcut_Declaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_AdviceType(EObject context, AdviceType semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ADVICE_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ADVICE_TYPE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAdviceTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (advicetype=AdviceType introadvicequery=IntroAdviceQuery)
	 */
	protected void sequence_Advice(EObject context, Advice semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ADVICE__ADVICETYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ADVICE__ADVICETYPE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ADVICE__INTROADVICEQUERY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ADVICE__INTROADVICEQUERY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAdviceAccess().getAdvicetypeAdviceTypeParserRuleCall_1_0(), semanticObject.getAdvicetype());
		feeder.accept(grammarAccess.getAdviceAccess().getIntroadvicequeryIntroAdviceQueryParserRuleCall_2_0(), semanticObject.getIntroadvicequery());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (mappingdeclarartion=Mapping_Declaration pointcutdeclaration=Pointcut_Declaration AIDeclaration=AI)
	 */
	protected void sequence_AspectDefinition(EObject context, AspectDefinition semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__MAPPINGDECLARARTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__MAPPINGDECLARARTION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__POINTCUTDECLARATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__POINTCUTDECLARATION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__AI_DECLARATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__AI_DECLARATION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAspectDefinitionAccess().getMappingdeclarartionMapping_DeclarationParserRuleCall_3_0(), semanticObject.getMappingdeclarartion());
		feeder.accept(grammarAccess.getAspectDefinitionAccess().getPointcutdeclarationPointcut_DeclarationParserRuleCall_4_0(), semanticObject.getPointcutdeclaration());
		feeder.accept(grammarAccess.getAspectDefinitionAccess().getAIDeclarationAIParserRuleCall_7_0(), semanticObject.getAIDeclaration());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (mappingdeclarartion=Mapping_Declaration pointcutdeclaration=Pointcut_Declaration name=ID AIDeclaration=AI)
	 */
	protected void sequence_AspectDefinition_Expression(EObject context, Expression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__MAPPINGDECLARARTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__MAPPINGDECLARARTION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__POINTCUTDECLARATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__POINTCUTDECLARATION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__AI_DECLARATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ASPECT_DEFINITION__AI_DECLARATION));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXPRESSION__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAspectDefinitionAccess().getMappingdeclarartionMapping_DeclarationParserRuleCall_3_0(), semanticObject.getMappingdeclarartion());
		feeder.accept(grammarAccess.getAspectDefinitionAccess().getPointcutdeclarationPointcut_DeclarationParserRuleCall_4_0(), semanticObject.getPointcutdeclaration());
		feeder.accept(grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_1_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAspectDefinitionAccess().getAIDeclarationAIParserRuleCall_7_0(), semanticObject.getAIDeclaration());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Expression(EObject context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=OclExpression
	 */
	protected void sequence_IntroAdviceQuery(EObject context, IntroAdviceQuery semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INTRO_ADVICE_QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INTRO_ADVICE_QUERY__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIntroAdviceQueryAccess().getNameOclExpressionParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=OclExpression
	 */
	protected void sequence_IntroQuery(EObject context, IntroQuery semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INTRO_QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INTRO_QUERY__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIntroQueryAccess().getNameOclExpressionParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_IntroType(EObject context, IntroType semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INTRO_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INTRO_TYPE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIntroTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (introtype=IntroType introquey=IntroQuery)
	 */
	protected void sequence_Intro(EObject context, Intro semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INTRO__INTROTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INTRO__INTROTYPE));
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INTRO__INTROQUEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INTRO__INTROQUEY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIntroAccess().getIntrotypeIntroTypeParserRuleCall_1_0(), semanticObject.getIntrotype());
		feeder.accept(grammarAccess.getIntroAccess().getIntroqueyIntroQueryParserRuleCall_2_0(), semanticObject.getIntroquey());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MappingName(EObject context, MappingName semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MAPPING_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MAPPING_NAME__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMappingNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     reference_mappingname=[MappingName|ID]
	 */
	protected void sequence_Mapping_Declaration(EObject context, Mapping_Declaration semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MAPPING_DECLARATION__REFERENCE_MAPPINGNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MAPPING_DECLARATION__REFERENCE_MAPPINGNAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMapping_DeclarationAccess().getReference_mappingnameMappingNameIDTerminalRuleCall_1_0_1(), semanticObject.getReference_mappingname());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     mappingname=MappingName
	 */
	protected void sequence_Mapping(EObject context, Mapping semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MAPPING__MAPPINGNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MAPPING__MAPPINGNAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMappingAccess().getMappingnameMappingNameParserRuleCall_1_0(), semanticObject.getMappingname());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     aspect+=Aspect
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_OclExpression(EObject context, OclExpression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OCL_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OCL_EXPRESSION__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getOclExpressionAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Pointcut_Declaration(EObject context, Pointcut_Declaration semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.POINTCUT_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.POINTCUT_DECLARATION__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPointcut_DeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
}
