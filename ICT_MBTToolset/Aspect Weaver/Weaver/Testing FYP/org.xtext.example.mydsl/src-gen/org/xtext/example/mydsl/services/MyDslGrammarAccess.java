/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cAspectAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAspectAspectParserRuleCall_0 = (RuleCall)cAspectAssignment.eContents().get(0);
		
		//Model:
		//	aspect+=Aspect;
		@Override public ParserRule getRule() { return rule; }

		//aspect+=Aspect
		public Assignment getAspectAssignment() { return cAspectAssignment; }

		//Aspect
		public RuleCall getAspectAspectParserRuleCall_0() { return cAspectAspectParserRuleCall_0; }
	}

	public class AspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aspect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAspectDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Aspect:
		//	Mapping | AspectDefinition;
		@Override public ParserRule getRule() { return rule; }

		//Mapping | AspectDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mapping
		public RuleCall getMappingParserRuleCall_0() { return cMappingParserRuleCall_0; }

		//AspectDefinition
		public RuleCall getAspectDefinitionParserRuleCall_1() { return cAspectDefinitionParserRuleCall_1; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMappingnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMappingnameMappingNameParserRuleCall_1_0 = (RuleCall)cMappingnameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cLetExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mapping:
		//	"mapping" mappingname=MappingName "{" letExpression "}";
		@Override public ParserRule getRule() { return rule; }

		//"mapping" mappingname=MappingName "{" letExpression "}"
		public Group getGroup() { return cGroup; }

		//"mapping"
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }

		//mappingname=MappingName
		public Assignment getMappingnameAssignment_1() { return cMappingnameAssignment_1; }

		//MappingName
		public RuleCall getMappingnameMappingNameParserRuleCall_1_0() { return cMappingnameMappingNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//letExpression
		public RuleCall getLetExpressionParserRuleCall_3() { return cLetExpressionParserRuleCall_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "letExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLetVarNameParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final RuleCall cOperationParserRuleCall_0_4_0 = (RuleCall)cGroup_0_4.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cGroup_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_0_4_1_1 = (RuleCall)cGroup_0_4_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLetVarNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cLetVarNameParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final RuleCall cCOAParserRuleCall_1_6_0 = (RuleCall)cGroup_1_6.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final RuleCall cSCOAParserRuleCall_1_6_2 = (RuleCall)cGroup_1_6.eContents().get(2);
		private final Group cGroup_1_7 = (Group)cGroup_1.eContents().get(7);
		private final Keyword cCommaKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Group cGroup_1_7_1 = (Group)cGroup_1_7.eContents().get(1);
		private final RuleCall cCOAParserRuleCall_1_7_1_0 = (RuleCall)cGroup_1_7_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_7_1_1 = (Keyword)cGroup_1_7_1.eContents().get(1);
		private final RuleCall cSCOAParserRuleCall_1_7_1_2 = (RuleCall)cGroup_1_7_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLetKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLetVarNameParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cLetVarNameArrayParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cColonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final RuleCall cCOAParserRuleCall_2_6_0 = (RuleCall)cGroup_2_6.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_6_1 = (Keyword)cGroup_2_6.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_6_2 = (Keyword)cGroup_2_6.eContents().get(2);
		private final Group cGroup_2_6_3 = (Group)cGroup_2_6.eContents().get(3);
		private final RuleCall cCOAParserRuleCall_2_6_3_0 = (RuleCall)cGroup_2_6_3.eContents().get(0);
		private final Group cGroup_2_6_3_1 = (Group)cGroup_2_6_3.eContents().get(1);
		private final Keyword cCommaKeyword_2_6_3_1_0 = (Keyword)cGroup_2_6_3_1.eContents().get(0);
		private final RuleCall cCOAParserRuleCall_2_6_3_1_1 = (RuleCall)cGroup_2_6_3_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_6_4 = (Keyword)cGroup_2_6.eContents().get(4);
		private final Group cGroup_2_7 = (Group)cGroup_2.eContents().get(7);
		private final Keyword cCommaKeyword_2_7_0 = (Keyword)cGroup_2_7.eContents().get(0);
		private final Group cGroup_2_7_1 = (Group)cGroup_2_7.eContents().get(1);
		private final RuleCall cCOAParserRuleCall_2_7_1_0 = (RuleCall)cGroup_2_7_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_7_1_1 = (Keyword)cGroup_2_7_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_7_1_2 = (Keyword)cGroup_2_7_1.eContents().get(2);
		private final Group cGroup_2_7_1_3 = (Group)cGroup_2_7_1.eContents().get(3);
		private final RuleCall cCOAParserRuleCall_2_7_1_3_0 = (RuleCall)cGroup_2_7_1_3.eContents().get(0);
		private final Group cGroup_2_7_1_3_1 = (Group)cGroup_2_7_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_2_7_1_3_1_0 = (Keyword)cGroup_2_7_1_3_1.eContents().get(0);
		private final RuleCall cCOAParserRuleCall_2_7_1_3_1_1 = (RuleCall)cGroup_2_7_1_3_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_7_1_4 = (Keyword)cGroup_2_7_1.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		
		//letExpression:
		//	"let" letVarName ":" "{" (Operation ("," Operation)*) "}" | "let" letVarName "->" letVarName ":" "{" (COA "->" SCOA)
		//	("," (COA "->" SCOA))* "}" | "let" letVarName "->" letVarNameArray ":" "{" (COA "->" "{" (COA ("," COA)+) "}") (","
		//	(COA "->" "{" (COA ("," COA)+) "}"))* "}";
		@Override public ParserRule getRule() { return rule; }

		//"let" letVarName ":" "{" (Operation ("," Operation)*) "}" | "let" letVarName "->" letVarName ":" "{" (COA "->" SCOA)
		//("," (COA "->" SCOA))* "}" | "let" letVarName "->" letVarNameArray ":" "{" (COA "->" "{" (COA ("," COA)+) "}") (","
		//(COA "->" "{" (COA ("," COA)+) "}"))* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"let" letVarName ":" "{" (Operation ("," Operation)*) "}"
		public Group getGroup_0() { return cGroup_0; }

		//"let"
		public Keyword getLetKeyword_0_0() { return cLetKeyword_0_0; }

		//letVarName
		public RuleCall getLetVarNameParserRuleCall_0_1() { return cLetVarNameParserRuleCall_0_1; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }

		//Operation ("," Operation)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//Operation
		public RuleCall getOperationParserRuleCall_0_4_0() { return cOperationParserRuleCall_0_4_0; }

		//("," Operation)*
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }

		//","
		public Keyword getCommaKeyword_0_4_1_0() { return cCommaKeyword_0_4_1_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_0_4_1_1() { return cOperationParserRuleCall_0_4_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }

		//"let" letVarName "->" letVarName ":" "{" (COA "->" SCOA) ("," (COA "->" SCOA))* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"let"
		public Keyword getLetKeyword_1_0() { return cLetKeyword_1_0; }

		//letVarName
		public RuleCall getLetVarNameParserRuleCall_1_1() { return cLetVarNameParserRuleCall_1_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }

		//letVarName
		public RuleCall getLetVarNameParserRuleCall_1_3() { return cLetVarNameParserRuleCall_1_3; }

		//":"
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_5() { return cLeftCurlyBracketKeyword_1_5; }

		//COA "->" SCOA
		public Group getGroup_1_6() { return cGroup_1_6; }

		//COA
		public RuleCall getCOAParserRuleCall_1_6_0() { return cCOAParserRuleCall_1_6_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_6_1() { return cHyphenMinusGreaterThanSignKeyword_1_6_1; }

		//SCOA
		public RuleCall getSCOAParserRuleCall_1_6_2() { return cSCOAParserRuleCall_1_6_2; }

		//("," (COA "->" SCOA))*
		public Group getGroup_1_7() { return cGroup_1_7; }

		//","
		public Keyword getCommaKeyword_1_7_0() { return cCommaKeyword_1_7_0; }

		//COA "->" SCOA
		public Group getGroup_1_7_1() { return cGroup_1_7_1; }

		//COA
		public RuleCall getCOAParserRuleCall_1_7_1_0() { return cCOAParserRuleCall_1_7_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_7_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_7_1_1; }

		//SCOA
		public RuleCall getSCOAParserRuleCall_1_7_1_2() { return cSCOAParserRuleCall_1_7_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_8() { return cRightCurlyBracketKeyword_1_8; }

		//"let" letVarName "->" letVarNameArray ":" "{" (COA "->" "{" (COA ("," COA)+) "}") ("," (COA "->" "{" (COA ("," COA)+)
		//"}"))* "}"
		public Group getGroup_2() { return cGroup_2; }

		//"let"
		public Keyword getLetKeyword_2_0() { return cLetKeyword_2_0; }

		//letVarName
		public RuleCall getLetVarNameParserRuleCall_2_1() { return cLetVarNameParserRuleCall_2_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_2() { return cHyphenMinusGreaterThanSignKeyword_2_2; }

		//letVarNameArray
		public RuleCall getLetVarNameArrayParserRuleCall_2_3() { return cLetVarNameArrayParserRuleCall_2_3; }

		//":"
		public Keyword getColonKeyword_2_4() { return cColonKeyword_2_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_5() { return cLeftCurlyBracketKeyword_2_5; }

		//COA "->" "{" (COA ("," COA)+) "}"
		public Group getGroup_2_6() { return cGroup_2_6; }

		//COA
		public RuleCall getCOAParserRuleCall_2_6_0() { return cCOAParserRuleCall_2_6_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_6_1() { return cHyphenMinusGreaterThanSignKeyword_2_6_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_6_2() { return cLeftCurlyBracketKeyword_2_6_2; }

		//COA ("," COA)+
		public Group getGroup_2_6_3() { return cGroup_2_6_3; }

		//COA
		public RuleCall getCOAParserRuleCall_2_6_3_0() { return cCOAParserRuleCall_2_6_3_0; }

		//("," COA)+
		public Group getGroup_2_6_3_1() { return cGroup_2_6_3_1; }

		//","
		public Keyword getCommaKeyword_2_6_3_1_0() { return cCommaKeyword_2_6_3_1_0; }

		//COA
		public RuleCall getCOAParserRuleCall_2_6_3_1_1() { return cCOAParserRuleCall_2_6_3_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_6_4() { return cRightCurlyBracketKeyword_2_6_4; }

		//("," (COA "->" "{" (COA ("," COA)+) "}"))*
		public Group getGroup_2_7() { return cGroup_2_7; }

		//","
		public Keyword getCommaKeyword_2_7_0() { return cCommaKeyword_2_7_0; }

		//COA "->" "{" (COA ("," COA)+) "}"
		public Group getGroup_2_7_1() { return cGroup_2_7_1; }

		//COA
		public RuleCall getCOAParserRuleCall_2_7_1_0() { return cCOAParserRuleCall_2_7_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_7_1_1() { return cHyphenMinusGreaterThanSignKeyword_2_7_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_7_1_2() { return cLeftCurlyBracketKeyword_2_7_1_2; }

		//COA ("," COA)+
		public Group getGroup_2_7_1_3() { return cGroup_2_7_1_3; }

		//COA
		public RuleCall getCOAParserRuleCall_2_7_1_3_0() { return cCOAParserRuleCall_2_7_1_3_0; }

		//("," COA)+
		public Group getGroup_2_7_1_3_1() { return cGroup_2_7_1_3_1; }

		//","
		public Keyword getCommaKeyword_2_7_1_3_1_0() { return cCommaKeyword_2_7_1_3_1_0; }

		//COA
		public RuleCall getCOAParserRuleCall_2_7_1_3_1_1() { return cCOAParserRuleCall_2_7_1_3_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_7_1_4() { return cRightCurlyBracketKeyword_2_7_1_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_8() { return cRightCurlyBracketKeyword_2_8; }
	}

	public class COAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COA");
		private final RuleCall cOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//COA:
		//	Operation;
		@Override public ParserRule getRule() { return rule; }

		//Operation
		public RuleCall getOperationParserRuleCall() { return cOperationParserRuleCall; }
	}

	public class SCOAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCOA");
		private final RuleCall cOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SCOA:
		//	Operation;
		@Override public ParserRule getRule() { return rule; }

		//Operation
		public RuleCall getOperationParserRuleCall() { return cOperationParserRuleCall; }
	}

	public class AttributeContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassifierContextParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNameCharParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AttributeContext:
		//	ClassifierContext "::" NameChar;
		@Override public ParserRule getRule() { return rule; }

		//ClassifierContext "::" NameChar
		public Group getGroup() { return cGroup; }

		//ClassifierContext
		public RuleCall getClassifierContextParserRuleCall_0() { return cClassifierContextParserRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//NameChar
		public RuleCall getNameCharParserRuleCall_2() { return cNameCharParserRuleCall_2; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassifierContextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeContextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Operation:
		//	ClassifierContext | OperationContext | AttributeContext;
		@Override public ParserRule getRule() { return rule; }

		//ClassifierContext | OperationContext | AttributeContext
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassifierContext
		public RuleCall getClassifierContextParserRuleCall_0() { return cClassifierContextParserRuleCall_0; }

		//OperationContext
		public RuleCall getOperationContextParserRuleCall_1() { return cOperationContextParserRuleCall_1; }

		//AttributeContext
		public RuleCall getAttributeContextParserRuleCall_2() { return cAttributeContextParserRuleCall_2; }
	}

	public class LetVarNameArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "letVarNameArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLetVarNameParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cLetVarNameParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//letVarNameArray:
		//	"{" (letVarName ("," letVarName)+) "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" (letVarName ("," letVarName)+) "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//letVarName ("," letVarName)+
		public Group getGroup_1() { return cGroup_1; }

		//letVarName
		public RuleCall getLetVarNameParserRuleCall_1_0() { return cLetVarNameParserRuleCall_1_0; }

		//("," letVarName)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//letVarName
		public RuleCall getLetVarNameParserRuleCall_1_1_1() { return cLetVarNameParserRuleCall_1_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class LetVarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "letVarName");
		private final RuleCall cNameCharParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//letVarName:
		//	NameChar;
		@Override public ParserRule getRule() { return rule; }

		//NameChar
		public RuleCall getNameCharParserRuleCall() { return cNameCharParserRuleCall; }
	}

	public class AspectDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AspectDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAspectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAspectNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingdeclarartionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingdeclarartionMapping_DeclarationParserRuleCall_3_0 = (RuleCall)cMappingdeclarartionAssignment_3.eContents().get(0);
		private final Assignment cPointcutdeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPointcutdeclarationPointcut_DeclarationParserRuleCall_4_0 = (RuleCall)cPointcutdeclarationAssignment_4.eContents().get(0);
		private final RuleCall cContextDeclarationParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cQueryDeclarationParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cAIDeclarationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAIDeclarationAIParserRuleCall_7_0 = (RuleCall)cAIDeclarationAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AspectDefinition:
		//	"aspect" AspectName "{" mappingdeclarartion=Mapping_Declaration pointcutdeclaration=Pointcut_Declaration
		//	ContextDeclaration QueryDeclaration? AIDeclaration=AI "}";
		@Override public ParserRule getRule() { return rule; }

		//"aspect" AspectName "{" mappingdeclarartion=Mapping_Declaration pointcutdeclaration=Pointcut_Declaration
		//ContextDeclaration QueryDeclaration? AIDeclaration=AI "}"
		public Group getGroup() { return cGroup; }

		//"aspect"
		public Keyword getAspectKeyword_0() { return cAspectKeyword_0; }

		//AspectName
		public RuleCall getAspectNameParserRuleCall_1() { return cAspectNameParserRuleCall_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//mappingdeclarartion=Mapping_Declaration
		public Assignment getMappingdeclarartionAssignment_3() { return cMappingdeclarartionAssignment_3; }

		//Mapping_Declaration
		public RuleCall getMappingdeclarartionMapping_DeclarationParserRuleCall_3_0() { return cMappingdeclarartionMapping_DeclarationParserRuleCall_3_0; }

		//pointcutdeclaration=Pointcut_Declaration
		public Assignment getPointcutdeclarationAssignment_4() { return cPointcutdeclarationAssignment_4; }

		//Pointcut_Declaration
		public RuleCall getPointcutdeclarationPointcut_DeclarationParserRuleCall_4_0() { return cPointcutdeclarationPointcut_DeclarationParserRuleCall_4_0; }

		//ContextDeclaration
		public RuleCall getContextDeclarationParserRuleCall_5() { return cContextDeclarationParserRuleCall_5; }

		//QueryDeclaration?
		public RuleCall getQueryDeclarationParserRuleCall_6() { return cQueryDeclarationParserRuleCall_6; }

		//AIDeclaration=AI
		public Assignment getAIDeclarationAssignment_7() { return cAIDeclarationAssignment_7; }

		//AI
		public RuleCall getAIDeclarationAIParserRuleCall_7_0() { return cAIDeclarationAIParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class AspectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AspectName");
		private final RuleCall cNameCharParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AspectName:
		//	NameChar;
		@Override public ParserRule getRule() { return rule; }

		//NameChar
		public RuleCall getNameCharParserRuleCall() { return cNameCharParserRuleCall; }
	}

	public class Mapping_DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping_Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImport_mappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReference_mappingnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReference_mappingnameMappingNameCrossReference_1_0 = (CrossReference)cReference_mappingnameAssignment_1.eContents().get(0);
		private final RuleCall cReference_mappingnameMappingNameIDTerminalRuleCall_1_0_1 = (RuleCall)cReference_mappingnameMappingNameCrossReference_1_0.eContents().get(1);
		
		//Mapping_Declaration:
		//	"import_mapping" reference_mappingname=[MappingName];
		@Override public ParserRule getRule() { return rule; }

		//"import_mapping" reference_mappingname=[MappingName]
		public Group getGroup() { return cGroup; }

		//"import_mapping"
		public Keyword getImport_mappingKeyword_0() { return cImport_mappingKeyword_0; }

		//reference_mappingname=[MappingName]
		public Assignment getReference_mappingnameAssignment_1() { return cReference_mappingnameAssignment_1; }

		//[MappingName]
		public CrossReference getReference_mappingnameMappingNameCrossReference_1_0() { return cReference_mappingnameMappingNameCrossReference_1_0; }

		//ID
		public RuleCall getReference_mappingnameMappingNameIDTerminalRuleCall_1_0_1() { return cReference_mappingnameMappingNameIDTerminalRuleCall_1_0_1; }
	}

	public class MappingNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MappingName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Pointcut_DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pointcut_Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPointcutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Pointcut_Declaration:
		//	"pointcut" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"pointcut" name=ID
		public Group getGroup() { return cGroup; }

		//"pointcut"
		public Keyword getPointcutKeyword_0() { return cPointcutKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PointcutNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PointcutName");
		private final RuleCall cNameCharParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PointcutName:
		//	NameChar;
		@Override public ParserRule getRule() { return rule; }

		//NameChar
		public RuleCall getNameCharParserRuleCall() { return cNameCharParserRuleCall; }
	}

	public class ContextDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cClassifierContextParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cOperationContextParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ContextDeclaration:
		//	"context" (ClassifierContext | OperationContext);
		@Override public ParserRule getRule() { return rule; }

		//"context" (ClassifierContext | OperationContext)
		public Group getGroup() { return cGroup; }

		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//ClassifierContext | OperationContext
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ClassifierContext
		public RuleCall getClassifierContextParserRuleCall_1_0() { return cClassifierContextParserRuleCall_1_0; }

		//OperationContext
		public RuleCall getOperationContextParserRuleCall_1_1() { return cOperationContextParserRuleCall_1_1; }
	}

	public class ClassifierContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierContext");
		private final RuleCall cNameCharParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassifierContext:
		//	NameChar;
		@Override public ParserRule getRule() { return rule; }

		//NameChar
		public RuleCall getNameCharParserRuleCall() { return cNameCharParserRuleCall; }
	}

	public class OperationContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassifierContextParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cOperationNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cArgumentsParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final RuleCall cArgumentsParserRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cReturntypeParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//OperationContext:
		//	ClassifierContext "::" OperationName "(" (Arguments ("," Arguments)*)? ")" (":" Returntype)?;
		@Override public ParserRule getRule() { return rule; }

		//ClassifierContext "::" OperationName "(" (Arguments ("," Arguments)*)? ")" (":" Returntype)?
		public Group getGroup() { return cGroup; }

		//ClassifierContext
		public RuleCall getClassifierContextParserRuleCall_0() { return cClassifierContextParserRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//OperationName
		public RuleCall getOperationNameParserRuleCall_2() { return cOperationNameParserRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(Arguments ("," Arguments)*)?
		public Group getGroup_4() { return cGroup_4; }

		//Arguments
		public RuleCall getArgumentsParserRuleCall_4_0() { return cArgumentsParserRuleCall_4_0; }

		//("," Arguments)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//Arguments
		public RuleCall getArgumentsParserRuleCall_4_1_1() { return cArgumentsParserRuleCall_4_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(":" Returntype)?
		public Group getGroup_6() { return cGroup_6; }

		//":"
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }

		//Returntype
		public RuleCall getReturntypeParserRuleCall_6_1() { return cReturntypeParserRuleCall_6_1; }
	}

	public class OperationNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationName");
		private final RuleCall cNameCharParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperationName:
		//	NameChar;
		@Override public ParserRule getRule() { return rule; }

		//NameChar
		public RuleCall getNameCharParserRuleCall() { return cNameCharParserRuleCall; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arguments");
		private final RuleCall cNameCharParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Arguments:
		//	NameChar;
		@Override public ParserRule getRule() { return rule; }

		//NameChar
		public RuleCall getNameCharParserRuleCall() { return cNameCharParserRuleCall; }
	}

	public class ReturntypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Returntype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFloatKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDoubleKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final RuleCall cNameCharParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Returntype:
		//	"Boolean" | "String" | "int" | "float" | "double" | NameChar;
		@Override public ParserRule getRule() { return rule; }

		//"Boolean" | "String" | "int" | "float" | "double" | NameChar
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"String"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"float"
		public Keyword getFloatKeyword_3() { return cFloatKeyword_3; }

		//"double"
		public Keyword getDoubleKeyword_4() { return cDoubleKeyword_4; }

		//NameChar
		public RuleCall getNameCharParserRuleCall_5() { return cNameCharParserRuleCall_5; }
	}

	public class AIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AI");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAdviceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AI:
		//	Advice | Intro;
		@Override public ParserRule getRule() { return rule; }

		//Advice | Intro
		public Alternatives getAlternatives() { return cAlternatives; }

		//Advice
		public RuleCall getAdviceParserRuleCall_0() { return cAdviceParserRuleCall_0; }

		//Intro
		public RuleCall getIntroParserRuleCall_1() { return cIntroParserRuleCall_1; }
	}

	public class AdviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Advice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdviceDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cAdvicetypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdvicetypeAdviceTypeParserRuleCall_1_0 = (RuleCall)cAdvicetypeAssignment_1.eContents().get(0);
		private final Assignment cIntroadvicequeryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntroadvicequeryIntroAdviceQueryParserRuleCall_2_0 = (RuleCall)cIntroadvicequeryAssignment_2.eContents().get(0);
		
		//Advice:
		//	AdviceDeclaration advicetype=AdviceType introadvicequery=IntroAdviceQuery;
		@Override public ParserRule getRule() { return rule; }

		//AdviceDeclaration advicetype=AdviceType introadvicequery=IntroAdviceQuery
		public Group getGroup() { return cGroup; }

		//AdviceDeclaration
		public RuleCall getAdviceDeclarationParserRuleCall_0() { return cAdviceDeclarationParserRuleCall_0; }

		//advicetype=AdviceType
		public Assignment getAdvicetypeAssignment_1() { return cAdvicetypeAssignment_1; }

		//AdviceType
		public RuleCall getAdvicetypeAdviceTypeParserRuleCall_1_0() { return cAdvicetypeAdviceTypeParserRuleCall_1_0; }

		//introadvicequery=IntroAdviceQuery
		public Assignment getIntroadvicequeryAssignment_2() { return cIntroadvicequeryAssignment_2; }

		//IntroAdviceQuery
		public RuleCall getIntroadvicequeryIntroAdviceQueryParserRuleCall_2_0() { return cIntroadvicequeryIntroAdviceQueryParserRuleCall_2_0; }
	}

	public class AdviceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdviceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQueryTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AdviceDeclaration:
		//	"advice" QueryType ":";
		@Override public ParserRule getRule() { return rule; }

		//"advice" QueryType ":"
		public Group getGroup() { return cGroup; }

		//"advice"
		public Keyword getAdviceKeyword_0() { return cAdviceKeyword_0; }

		//QueryType
		public RuleCall getQueryTypeParserRuleCall_1() { return cQueryTypeParserRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}

	public class QueryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPreKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPostKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInvKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//QueryType:
		//	"pre" | "post" | "inv";
		@Override public ParserRule getRule() { return rule; }

		//"pre" | "post" | "inv"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"pre"
		public Keyword getPreKeyword_0() { return cPreKeyword_0; }

		//"post"
		public Keyword getPostKeyword_1() { return cPostKeyword_1; }

		//"inv"
		public Keyword getInvKeyword_2() { return cInvKeyword_2; }
	}

	public class AdviceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdviceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOrKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cXorKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AdviceType:
		//	("and" | "or" | "xor") name=ID;
		@Override public ParserRule getRule() { return rule; }

		//("and" | "or" | "xor") name=ID
		public Group getGroup() { return cGroup; }

		//"and" | "or" | "xor"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"and"
		public Keyword getAndKeyword_0_0() { return cAndKeyword_0_0; }

		//"or"
		public Keyword getOrKeyword_0_1() { return cOrKeyword_0_1; }

		//"xor"
		public Keyword getXorKeyword_0_2() { return cXorKeyword_0_2; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class IntroAdviceQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntroAdviceQuery");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameOclExpressionParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//IntroAdviceQuery:
		//	name=OclExpression;
		@Override public ParserRule getRule() { return rule; }

		//name=OclExpression
		public Assignment getNameAssignment() { return cNameAssignment; }

		//OclExpression
		public RuleCall getNameOclExpressionParserRuleCall_0() { return cNameOclExpressionParserRuleCall_0; }
	}

	public class IntroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Intro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIntroDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIntrotypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntrotypeIntroTypeParserRuleCall_1_0 = (RuleCall)cIntrotypeAssignment_1.eContents().get(0);
		private final Assignment cIntroqueyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntroqueyIntroQueryParserRuleCall_2_0 = (RuleCall)cIntroqueyAssignment_2.eContents().get(0);
		
		//Intro:
		//	IntroDeclaration introtype=IntroType introquey=IntroQuery;
		@Override public ParserRule getRule() { return rule; }

		//IntroDeclaration introtype=IntroType introquey=IntroQuery
		public Group getGroup() { return cGroup; }

		//IntroDeclaration
		public RuleCall getIntroDeclarationParserRuleCall_0() { return cIntroDeclarationParserRuleCall_0; }

		//introtype=IntroType
		public Assignment getIntrotypeAssignment_1() { return cIntrotypeAssignment_1; }

		//IntroType
		public RuleCall getIntrotypeIntroTypeParserRuleCall_1_0() { return cIntrotypeIntroTypeParserRuleCall_1_0; }

		//introquey=IntroQuery
		public Assignment getIntroqueyAssignment_2() { return cIntroqueyAssignment_2; }

		//IntroQuery
		public RuleCall getIntroqueyIntroQueryParserRuleCall_2_0() { return cIntroqueyIntroQueryParserRuleCall_2_0; }
	}

	public class IntroDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntroDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntroDeclaration:
		//	"intro" ":";
		@Override public ParserRule getRule() { return rule; }

		//"intro" ":"
		public Group getGroup() { return cGroup; }

		//"intro"
		public Keyword getIntroKeyword_0() { return cIntroKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class IntroTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntroType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQueryTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IntroType:
		//	QueryType name=ID;
		@Override public ParserRule getRule() { return rule; }

		//QueryType name=ID
		public Group getGroup() { return cGroup; }

		//QueryType
		public RuleCall getQueryTypeParserRuleCall_0() { return cQueryTypeParserRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class IntroQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntroQuery");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameOclExpressionParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//IntroQuery:
		//	name=OclExpression;
		@Override public ParserRule getRule() { return rule; }

		//name=OclExpression
		public Assignment getNameAssignment() { return cNameAssignment; }

		//OclExpression
		public RuleCall getNameOclExpressionParserRuleCall_0() { return cNameOclExpressionParserRuleCall_0; }
	}

	public class QueryDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQueryTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSelectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cQueryBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//QueryDeclaration:
		//	QueryType "->" "select" QueryBody;
		@Override public ParserRule getRule() { return rule; }

		//QueryType "->" "select" QueryBody
		public Group getGroup() { return cGroup; }

		//QueryType
		public RuleCall getQueryTypeParserRuleCall_0() { return cQueryTypeParserRuleCall_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//"select"
		public Keyword getSelectKeyword_2() { return cSelectKeyword_2; }

		//QueryBody
		public RuleCall getQueryBodyParserRuleCall_3() { return cQueryBodyParserRuleCall_3; }
	}

	public class QueryBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QueryBody:
		//	"(" Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExpOCLExpressionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cExpOclIsTypeOfThenExpKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cExpOCLExpressionKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cExpOclIsTypeOfIfExpKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cAndKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cExpConditionRefferedVariableKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	"exp:OCLExpression" "|" "exp.oclIsTypeOf(thenExp)" | ("exp:OCLExpression" "|" "exp.oclIsTypeOf(ifExp)" "and"
		//	"exp.condition.refferedVariable" "=") name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"exp:OCLExpression" "|" "exp.oclIsTypeOf(thenExp)" | ("exp:OCLExpression" "|" "exp.oclIsTypeOf(ifExp)" "and"
		//"exp.condition.refferedVariable" "=") name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"exp:OCLExpression" "|" "exp.oclIsTypeOf(thenExp)"
		public Group getGroup_0() { return cGroup_0; }

		//"exp:OCLExpression"
		public Keyword getExpOCLExpressionKeyword_0_0() { return cExpOCLExpressionKeyword_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_0_1() { return cVerticalLineKeyword_0_1; }

		//"exp.oclIsTypeOf(thenExp)"
		public Keyword getExpOclIsTypeOfThenExpKeyword_0_2() { return cExpOclIsTypeOfThenExpKeyword_0_2; }

		//("exp:OCLExpression" "|" "exp.oclIsTypeOf(ifExp)" "and" "exp.condition.refferedVariable" "=") name=ID
		public Group getGroup_1() { return cGroup_1; }

		//"exp:OCLExpression" "|" "exp.oclIsTypeOf(ifExp)" "and" "exp.condition.refferedVariable" "="
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"exp:OCLExpression"
		public Keyword getExpOCLExpressionKeyword_1_0_0() { return cExpOCLExpressionKeyword_1_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_1() { return cVerticalLineKeyword_1_0_1; }

		//"exp.oclIsTypeOf(ifExp)"
		public Keyword getExpOclIsTypeOfIfExpKeyword_1_0_2() { return cExpOclIsTypeOfIfExpKeyword_1_0_2; }

		//"and"
		public Keyword getAndKeyword_1_0_3() { return cAndKeyword_1_0_3; }

		//"exp.condition.refferedVariable"
		public Keyword getExpConditionRefferedVariableKeyword_1_0_4() { return cExpConditionRefferedVariableKeyword_1_0_4; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_5() { return cEqualsSignKeyword_1_0_5; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}

	public class OclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//OclExpression:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NameCharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameChar");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NameChar:
		//	ID+;
		@Override public ParserRule getRule() { return rule; }

		//ID+
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final AspectElements pAspect;
	private final MappingElements pMapping;
	private final LetExpressionElements pLetExpression;
	private final COAElements pCOA;
	private final SCOAElements pSCOA;
	private final AttributeContextElements pAttributeContext;
	private final OperationElements pOperation;
	private final LetVarNameArrayElements pLetVarNameArray;
	private final LetVarNameElements pLetVarName;
	private final AspectDefinitionElements pAspectDefinition;
	private final AspectNameElements pAspectName;
	private final Mapping_DeclarationElements pMapping_Declaration;
	private final MappingNameElements pMappingName;
	private final Pointcut_DeclarationElements pPointcut_Declaration;
	private final PointcutNameElements pPointcutName;
	private final ContextDeclarationElements pContextDeclaration;
	private final ClassifierContextElements pClassifierContext;
	private final OperationContextElements pOperationContext;
	private final OperationNameElements pOperationName;
	private final ArgumentsElements pArguments;
	private final ReturntypeElements pReturntype;
	private final AIElements pAI;
	private final AdviceElements pAdvice;
	private final AdviceDeclarationElements pAdviceDeclaration;
	private final QueryTypeElements pQueryType;
	private final AdviceTypeElements pAdviceType;
	private final IntroAdviceQueryElements pIntroAdviceQuery;
	private final IntroElements pIntro;
	private final IntroDeclarationElements pIntroDeclaration;
	private final IntroTypeElements pIntroType;
	private final IntroQueryElements pIntroQuery;
	private final QueryDeclarationElements pQueryDeclaration;
	private final QueryBodyElements pQueryBody;
	private final ExpressionElements pExpression;
	private final OclExpressionElements pOclExpression;
	private final NameCharElements pNameChar;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAspect = new AspectElements();
		this.pMapping = new MappingElements();
		this.pLetExpression = new LetExpressionElements();
		this.pCOA = new COAElements();
		this.pSCOA = new SCOAElements();
		this.pAttributeContext = new AttributeContextElements();
		this.pOperation = new OperationElements();
		this.pLetVarNameArray = new LetVarNameArrayElements();
		this.pLetVarName = new LetVarNameElements();
		this.pAspectDefinition = new AspectDefinitionElements();
		this.pAspectName = new AspectNameElements();
		this.pMapping_Declaration = new Mapping_DeclarationElements();
		this.pMappingName = new MappingNameElements();
		this.pPointcut_Declaration = new Pointcut_DeclarationElements();
		this.pPointcutName = new PointcutNameElements();
		this.pContextDeclaration = new ContextDeclarationElements();
		this.pClassifierContext = new ClassifierContextElements();
		this.pOperationContext = new OperationContextElements();
		this.pOperationName = new OperationNameElements();
		this.pArguments = new ArgumentsElements();
		this.pReturntype = new ReturntypeElements();
		this.pAI = new AIElements();
		this.pAdvice = new AdviceElements();
		this.pAdviceDeclaration = new AdviceDeclarationElements();
		this.pQueryType = new QueryTypeElements();
		this.pAdviceType = new AdviceTypeElements();
		this.pIntroAdviceQuery = new IntroAdviceQueryElements();
		this.pIntro = new IntroElements();
		this.pIntroDeclaration = new IntroDeclarationElements();
		this.pIntroType = new IntroTypeElements();
		this.pIntroQuery = new IntroQueryElements();
		this.pQueryDeclaration = new QueryDeclarationElements();
		this.pQueryBody = new QueryBodyElements();
		this.pExpression = new ExpressionElements();
		this.pOclExpression = new OclExpressionElements();
		this.pNameChar = new NameCharElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	aspect+=Aspect;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Aspect:
	//	Mapping | AspectDefinition;
	public AspectElements getAspectAccess() {
		return pAspect;
	}
	
	public ParserRule getAspectRule() {
		return getAspectAccess().getRule();
	}

	//Mapping:
	//	"mapping" mappingname=MappingName "{" letExpression "}";
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//letExpression:
	//	"let" letVarName ":" "{" (Operation ("," Operation)*) "}" | "let" letVarName "->" letVarName ":" "{" (COA "->" SCOA)
	//	("," (COA "->" SCOA))* "}" | "let" letVarName "->" letVarNameArray ":" "{" (COA "->" "{" (COA ("," COA)+) "}") (","
	//	(COA "->" "{" (COA ("," COA)+) "}"))* "}";
	public LetExpressionElements getLetExpressionAccess() {
		return pLetExpression;
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	//COA:
	//	Operation;
	public COAElements getCOAAccess() {
		return pCOA;
	}
	
	public ParserRule getCOARule() {
		return getCOAAccess().getRule();
	}

	//SCOA:
	//	Operation;
	public SCOAElements getSCOAAccess() {
		return pSCOA;
	}
	
	public ParserRule getSCOARule() {
		return getSCOAAccess().getRule();
	}

	//AttributeContext:
	//	ClassifierContext "::" NameChar;
	public AttributeContextElements getAttributeContextAccess() {
		return pAttributeContext;
	}
	
	public ParserRule getAttributeContextRule() {
		return getAttributeContextAccess().getRule();
	}

	//Operation:
	//	ClassifierContext | OperationContext | AttributeContext;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//letVarNameArray:
	//	"{" (letVarName ("," letVarName)+) "}";
	public LetVarNameArrayElements getLetVarNameArrayAccess() {
		return pLetVarNameArray;
	}
	
	public ParserRule getLetVarNameArrayRule() {
		return getLetVarNameArrayAccess().getRule();
	}

	//letVarName:
	//	NameChar;
	public LetVarNameElements getLetVarNameAccess() {
		return pLetVarName;
	}
	
	public ParserRule getLetVarNameRule() {
		return getLetVarNameAccess().getRule();
	}

	//AspectDefinition:
	//	"aspect" AspectName "{" mappingdeclarartion=Mapping_Declaration pointcutdeclaration=Pointcut_Declaration
	//	ContextDeclaration QueryDeclaration? AIDeclaration=AI "}";
	public AspectDefinitionElements getAspectDefinitionAccess() {
		return pAspectDefinition;
	}
	
	public ParserRule getAspectDefinitionRule() {
		return getAspectDefinitionAccess().getRule();
	}

	//AspectName:
	//	NameChar;
	public AspectNameElements getAspectNameAccess() {
		return pAspectName;
	}
	
	public ParserRule getAspectNameRule() {
		return getAspectNameAccess().getRule();
	}

	//Mapping_Declaration:
	//	"import_mapping" reference_mappingname=[MappingName];
	public Mapping_DeclarationElements getMapping_DeclarationAccess() {
		return pMapping_Declaration;
	}
	
	public ParserRule getMapping_DeclarationRule() {
		return getMapping_DeclarationAccess().getRule();
	}

	//MappingName:
	//	name=ID;
	public MappingNameElements getMappingNameAccess() {
		return pMappingName;
	}
	
	public ParserRule getMappingNameRule() {
		return getMappingNameAccess().getRule();
	}

	//Pointcut_Declaration:
	//	"pointcut" name=ID;
	public Pointcut_DeclarationElements getPointcut_DeclarationAccess() {
		return pPointcut_Declaration;
	}
	
	public ParserRule getPointcut_DeclarationRule() {
		return getPointcut_DeclarationAccess().getRule();
	}

	//PointcutName:
	//	NameChar;
	public PointcutNameElements getPointcutNameAccess() {
		return pPointcutName;
	}
	
	public ParserRule getPointcutNameRule() {
		return getPointcutNameAccess().getRule();
	}

	//ContextDeclaration:
	//	"context" (ClassifierContext | OperationContext);
	public ContextDeclarationElements getContextDeclarationAccess() {
		return pContextDeclaration;
	}
	
	public ParserRule getContextDeclarationRule() {
		return getContextDeclarationAccess().getRule();
	}

	//ClassifierContext:
	//	NameChar;
	public ClassifierContextElements getClassifierContextAccess() {
		return pClassifierContext;
	}
	
	public ParserRule getClassifierContextRule() {
		return getClassifierContextAccess().getRule();
	}

	//OperationContext:
	//	ClassifierContext "::" OperationName "(" (Arguments ("," Arguments)*)? ")" (":" Returntype)?;
	public OperationContextElements getOperationContextAccess() {
		return pOperationContext;
	}
	
	public ParserRule getOperationContextRule() {
		return getOperationContextAccess().getRule();
	}

	//OperationName:
	//	NameChar;
	public OperationNameElements getOperationNameAccess() {
		return pOperationName;
	}
	
	public ParserRule getOperationNameRule() {
		return getOperationNameAccess().getRule();
	}

	//Arguments:
	//	NameChar;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//Returntype:
	//	"Boolean" | "String" | "int" | "float" | "double" | NameChar;
	public ReturntypeElements getReturntypeAccess() {
		return pReturntype;
	}
	
	public ParserRule getReturntypeRule() {
		return getReturntypeAccess().getRule();
	}

	//AI:
	//	Advice | Intro;
	public AIElements getAIAccess() {
		return pAI;
	}
	
	public ParserRule getAIRule() {
		return getAIAccess().getRule();
	}

	//Advice:
	//	AdviceDeclaration advicetype=AdviceType introadvicequery=IntroAdviceQuery;
	public AdviceElements getAdviceAccess() {
		return pAdvice;
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//AdviceDeclaration:
	//	"advice" QueryType ":";
	public AdviceDeclarationElements getAdviceDeclarationAccess() {
		return pAdviceDeclaration;
	}
	
	public ParserRule getAdviceDeclarationRule() {
		return getAdviceDeclarationAccess().getRule();
	}

	//QueryType:
	//	"pre" | "post" | "inv";
	public QueryTypeElements getQueryTypeAccess() {
		return pQueryType;
	}
	
	public ParserRule getQueryTypeRule() {
		return getQueryTypeAccess().getRule();
	}

	//AdviceType:
	//	("and" | "or" | "xor") name=ID;
	public AdviceTypeElements getAdviceTypeAccess() {
		return pAdviceType;
	}
	
	public ParserRule getAdviceTypeRule() {
		return getAdviceTypeAccess().getRule();
	}

	//IntroAdviceQuery:
	//	name=OclExpression;
	public IntroAdviceQueryElements getIntroAdviceQueryAccess() {
		return pIntroAdviceQuery;
	}
	
	public ParserRule getIntroAdviceQueryRule() {
		return getIntroAdviceQueryAccess().getRule();
	}

	//Intro:
	//	IntroDeclaration introtype=IntroType introquey=IntroQuery;
	public IntroElements getIntroAccess() {
		return pIntro;
	}
	
	public ParserRule getIntroRule() {
		return getIntroAccess().getRule();
	}

	//IntroDeclaration:
	//	"intro" ":";
	public IntroDeclarationElements getIntroDeclarationAccess() {
		return pIntroDeclaration;
	}
	
	public ParserRule getIntroDeclarationRule() {
		return getIntroDeclarationAccess().getRule();
	}

	//IntroType:
	//	QueryType name=ID;
	public IntroTypeElements getIntroTypeAccess() {
		return pIntroType;
	}
	
	public ParserRule getIntroTypeRule() {
		return getIntroTypeAccess().getRule();
	}

	//IntroQuery:
	//	name=OclExpression;
	public IntroQueryElements getIntroQueryAccess() {
		return pIntroQuery;
	}
	
	public ParserRule getIntroQueryRule() {
		return getIntroQueryAccess().getRule();
	}

	//QueryDeclaration:
	//	QueryType "->" "select" QueryBody;
	public QueryDeclarationElements getQueryDeclarationAccess() {
		return pQueryDeclaration;
	}
	
	public ParserRule getQueryDeclarationRule() {
		return getQueryDeclarationAccess().getRule();
	}

	//QueryBody:
	//	"(" Expression ")";
	public QueryBodyElements getQueryBodyAccess() {
		return pQueryBody;
	}
	
	public ParserRule getQueryBodyRule() {
		return getQueryBodyAccess().getRule();
	}

	//Expression:
	//	"exp:OCLExpression" "|" "exp.oclIsTypeOf(thenExp)" | ("exp:OCLExpression" "|" "exp.oclIsTypeOf(ifExp)" "and"
	//	"exp.condition.refferedVariable" "=") name=ID;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//OclExpression:
	//	value=STRING;
	public OclExpressionElements getOclExpressionAccess() {
		return pOclExpression;
	}
	
	public ParserRule getOclExpressionRule() {
		return getOclExpressionAccess().getRule();
	}

	//NameChar:
	//	ID+;
	public NameCharElements getNameCharAccess() {
		return pNameChar;
	}
	
	public ParserRule getNameCharRule() {
		return getNameCharAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
