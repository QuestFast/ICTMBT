/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAspectAccess().getAlternatives(), "rule__Aspect__Alternatives");
					put(grammarAccess.getLetExpressionAccess().getAlternatives(), "rule__LetExpression__Alternatives");
					put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
					put(grammarAccess.getContextDeclarationAccess().getAlternatives_1(), "rule__ContextDeclaration__Alternatives_1");
					put(grammarAccess.getReturntypeAccess().getAlternatives(), "rule__Returntype__Alternatives");
					put(grammarAccess.getAIAccess().getAlternatives(), "rule__AI__Alternatives");
					put(grammarAccess.getQueryTypeAccess().getAlternatives(), "rule__QueryType__Alternatives");
					put(grammarAccess.getAdviceTypeAccess().getAlternatives_0(), "rule__AdviceType__Alternatives_0");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_0(), "rule__LetExpression__Group_0__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_0_4(), "rule__LetExpression__Group_0_4__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_0_4_1(), "rule__LetExpression__Group_0_4_1__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_1(), "rule__LetExpression__Group_1__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_1_6(), "rule__LetExpression__Group_1_6__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_1_7(), "rule__LetExpression__Group_1_7__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_1_7_1(), "rule__LetExpression__Group_1_7_1__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2(), "rule__LetExpression__Group_2__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2_6(), "rule__LetExpression__Group_2_6__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2_6_3(), "rule__LetExpression__Group_2_6_3__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2_6_3_1(), "rule__LetExpression__Group_2_6_3_1__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2_7(), "rule__LetExpression__Group_2_7__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2_7_1(), "rule__LetExpression__Group_2_7_1__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2_7_1_3(), "rule__LetExpression__Group_2_7_1_3__0");
					put(grammarAccess.getLetExpressionAccess().getGroup_2_7_1_3_1(), "rule__LetExpression__Group_2_7_1_3_1__0");
					put(grammarAccess.getAttributeContextAccess().getGroup(), "rule__AttributeContext__Group__0");
					put(grammarAccess.getLetVarNameArrayAccess().getGroup(), "rule__LetVarNameArray__Group__0");
					put(grammarAccess.getLetVarNameArrayAccess().getGroup_1(), "rule__LetVarNameArray__Group_1__0");
					put(grammarAccess.getLetVarNameArrayAccess().getGroup_1_1(), "rule__LetVarNameArray__Group_1_1__0");
					put(grammarAccess.getAspectDefinitionAccess().getGroup(), "rule__AspectDefinition__Group__0");
					put(grammarAccess.getMapping_DeclarationAccess().getGroup(), "rule__Mapping_Declaration__Group__0");
					put(grammarAccess.getPointcut_DeclarationAccess().getGroup(), "rule__Pointcut_Declaration__Group__0");
					put(grammarAccess.getContextDeclarationAccess().getGroup(), "rule__ContextDeclaration__Group__0");
					put(grammarAccess.getOperationContextAccess().getGroup(), "rule__OperationContext__Group__0");
					put(grammarAccess.getOperationContextAccess().getGroup_4(), "rule__OperationContext__Group_4__0");
					put(grammarAccess.getOperationContextAccess().getGroup_4_1(), "rule__OperationContext__Group_4_1__0");
					put(grammarAccess.getOperationContextAccess().getGroup_6(), "rule__OperationContext__Group_6__0");
					put(grammarAccess.getAdviceAccess().getGroup(), "rule__Advice__Group__0");
					put(grammarAccess.getAdviceDeclarationAccess().getGroup(), "rule__AdviceDeclaration__Group__0");
					put(grammarAccess.getAdviceTypeAccess().getGroup(), "rule__AdviceType__Group__0");
					put(grammarAccess.getIntroAccess().getGroup(), "rule__Intro__Group__0");
					put(grammarAccess.getIntroDeclarationAccess().getGroup(), "rule__IntroDeclaration__Group__0");
					put(grammarAccess.getIntroTypeAccess().getGroup(), "rule__IntroType__Group__0");
					put(grammarAccess.getQueryDeclarationAccess().getGroup(), "rule__QueryDeclaration__Group__0");
					put(grammarAccess.getQueryBodyAccess().getGroup(), "rule__QueryBody__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0(), "rule__Expression__Group_1_0__0");
					put(grammarAccess.getModelAccess().getAspectAssignment(), "rule__Model__AspectAssignment");
					put(grammarAccess.getMappingAccess().getMappingnameAssignment_1(), "rule__Mapping__MappingnameAssignment_1");
					put(grammarAccess.getAspectDefinitionAccess().getMappingdeclarartionAssignment_3(), "rule__AspectDefinition__MappingdeclarartionAssignment_3");
					put(grammarAccess.getAspectDefinitionAccess().getPointcutdeclarationAssignment_4(), "rule__AspectDefinition__PointcutdeclarationAssignment_4");
					put(grammarAccess.getAspectDefinitionAccess().getAIDeclarationAssignment_7(), "rule__AspectDefinition__AIDeclarationAssignment_7");
					put(grammarAccess.getMapping_DeclarationAccess().getReference_mappingnameAssignment_1(), "rule__Mapping_Declaration__Reference_mappingnameAssignment_1");
					put(grammarAccess.getMappingNameAccess().getNameAssignment(), "rule__MappingName__NameAssignment");
					put(grammarAccess.getPointcut_DeclarationAccess().getNameAssignment_1(), "rule__Pointcut_Declaration__NameAssignment_1");
					put(grammarAccess.getAdviceAccess().getAdvicetypeAssignment_1(), "rule__Advice__AdvicetypeAssignment_1");
					put(grammarAccess.getAdviceAccess().getIntroadvicequeryAssignment_2(), "rule__Advice__IntroadvicequeryAssignment_2");
					put(grammarAccess.getAdviceTypeAccess().getNameAssignment_1(), "rule__AdviceType__NameAssignment_1");
					put(grammarAccess.getIntroAdviceQueryAccess().getNameAssignment(), "rule__IntroAdviceQuery__NameAssignment");
					put(grammarAccess.getIntroAccess().getIntrotypeAssignment_1(), "rule__Intro__IntrotypeAssignment_1");
					put(grammarAccess.getIntroAccess().getIntroqueyAssignment_2(), "rule__Intro__IntroqueyAssignment_2");
					put(grammarAccess.getIntroTypeAccess().getNameAssignment_1(), "rule__IntroType__NameAssignment_1");
					put(grammarAccess.getIntroQueryAccess().getNameAssignment(), "rule__IntroQuery__NameAssignment");
					put(grammarAccess.getExpressionAccess().getNameAssignment_1_1(), "rule__Expression__NameAssignment_1_1");
					put(grammarAccess.getOclExpressionAccess().getValueAssignment(), "rule__OclExpression__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
